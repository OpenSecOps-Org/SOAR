Comment: A state machine that processes Security Hub findings.
StartAt: Isolate Finding
States:
    Isolate Finding:
        Type: Pass
        Parameters:
            account: {}
            finding.$: '$.detail.findings[0]'
            tags: {}
            actions:
                suppress_finding: false
                autoremediation_not_done: false
                reconsider_later: false
            messages:
                actions_taken: None.
                actions_required: >-
                    Please update your infrastructural code to prevent this
                    security issue from arising again at the next deployment.
                ai:
                    plaintext: ''
                    html: ''
            db: {}
            DeferTeamFixes: '${DeferTeamFixes}'
            
        Next: Get Account Data

    Get Account Data:
        Type: Task
        Resource: '${GetAccountDataFunctionArn}'
        InputPath: $.finding.AwsAccountId
        ResultPath: $.account
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - States.TaskFailed
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: Get Ticket

    Get Ticket:
        Type: Task
        Resource: 'arn:aws:states:::dynamodb:getItem'
        Parameters:
            TableName: '${TicketsName}'
            Key:
                id:
                    S.$: $.finding.Id
        ResultPath: $.db.tickets
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.AmazonDynamoDBException
                    - DynamoDB.InternalServerErrorException
                    - DynamoDB.SdkClientException
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: 'ARCHIVED, SUPPRESSED, RESOLVED?'

    'ARCHIVED, SUPPRESSED, RESOLVED?':
        Type: Choice
        Choices:
            -
                Variable: $.finding.RecordState
                StringEquals: ARCHIVED
                Next: Finding Has Open Ticket?
            -
                Variable: $.finding.Workflow.Status
                StringEquals: SUPPRESSED
                Next: Finding Has Open Ticket?
            -
                Variable: $.finding.Workflow.Status
                StringEquals: RESOLVED
                Next: Finding Has Open Ticket?
        Default: NOTIFIED?

    Finding Has Open Ticket?:
        Type: Choice
        Choices:
            -
                And:
                    -
                        Variable: $.finding.UserDefinedFields.TicketOpen
                        IsPresent: true
                    -
                        Variable: $.finding.UserDefinedFields.TicketOpen
                        StringEquals: 'Yes'
                Next: Setup Ticket ID From Finding
        Default: Table Has Open Ticket?

    Table Has Open Ticket?:
        Type: Choice
        Choices:
            - 
                And:
                    -
                        Variable: $.db.tickets.Item
                        IsPresent: true
                    -
                        Variable: $.db.tickets.Item.closed_at
                        StringMatches: "NULL#*"
                Next: Setup Ticket ID From Table
        Default: Do Nothing

    Setup Ticket ID From Finding:
        Type: Pass
        Parameters:
            account.$: $.account
            finding.$: $.finding
            tags.$: $.tags
            actions.$: $.actions
            messages.$: $.messages
            db.$: $.db
            ticket_id.$: $.finding.UserDefinedFields.TicketId
        Next: Format Ticket Closed Message

    Setup Ticket ID From Table:
        Type: Pass
        Parameters:
            account.$: $.account
            finding.$: $.finding
            tags.$: $.tags
            actions.$: $.actions
            messages.$: $.messages
            db.$: $.db
            ticket_id.$: $.db.tickets.Item.ticket_id.S
        Next: Format Ticket Closed Message

    Format Ticket Closed Message:
        Type: Task
        Resource: '${FormatTicketClosedMessageFunctionArn}'
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Close Ticket

    Close Ticket:
        Type: Task
        Resource: '${CloseTicketFunctionArn}'
        Parameters:
            TicketId.$: $.ticket_id
        ResultPath: $.close_ticket_succeeded
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Remember Ticket Closed

    Remember Ticket Closed:
        Type: Task
        Resource: '${RememberTicketClosedFunctionArn}'
        Parameters:
            Id.$: $.finding.Id
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: AddAiInstructionsForClosedTickets

    AddAiInstructionsForClosedTickets:
        Type: Task
        Resource: arn:aws:states:::dynamodb:getItem
        Parameters:
            TableName: "${OpenAIPromptsTableName}"
            Key:
                id: "ticket_closed"
            ProjectionExpression: "instructions"
        ResultSelector:
            instructions.$: "$.Item.instructions.S"
        ResultPath: "$.nested_instructions"
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: AddAiDataForClosedTickets

    AddAiDataForClosedTickets:
        Type: Task
        Resource: '${QueryChatGPTFunctionArn}'
        TimeoutSeconds: 120
        Retry:
            -
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                IntervalSeconds: 5
                MaxAttempts: 5
                BackoffRate: 2
        Catch:
            -   
                ErrorEquals:
                    - States.Timeout
                Next: Send Ticket Closed Email
            -   
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                Next: Send Ticket Closed Email
            -   
                ErrorEquals:
                -   States.ALL
                ResultPath: "$.openai-error-info"
                Next: OpenAiFailState
        Next: Send Ticket Closed Email

    Send Ticket Closed Email:
        Type: Task
        Resource: '${SendEmailFunctionArn}'
        Parameters:
            Recipient.$: $.account.TeamEmail
            Subject.$: $.messages.email.subject
            Body.$: $.messages.email.body
            Html.$: $.messages.email.html
            AiPlaintext.$: $.messages.ai.plaintext
            AiHtml.$: $.messages.ai.html
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Remove ticket data

    Remove ticket data:
        Type: Task
        Resource: '${UpdateClosedFindingFunctionArn}'
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        End: true

    NOTIFIED?:
        Type: Choice
        Choices:
            -
                Variable: $.finding.Workflow.Status
                StringEquals: NOTIFIED
                Next: Do Nothing
        Default: Compliance Evaluation Error?

    Do Nothing:
        Type: Succeed

    Compliance Evaluation Error?:
        Type: Choice
        Choices:
            -
                And:
                    -
                        Variable: $.finding.Compliance.Status
                        IsPresent: true
                    -
                        Or:
                            -
                                Variable: $.finding.Compliance.Status
                                StringEquals: WARNING
                            -
                                Variable: $.finding.Compliance.Status
                                StringEquals: NOT_AVAILABLE
                Next: Suppress Finding
        Default: Is a Control?

    Suppress Finding:
        Type: Task
        Resource: '${SuppressFindingFunctionArn}'
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                    - TooManyRequestsException
                IntervalSeconds: 3
                MaxAttempts: 25
                BackoffRate: 3
        End: true

    Is a Control?:
        Type: Choice
        Choices:
            -
                Variable: $.finding.Compliance.SecurityControlId
                IsPresent: true
                Next: PASSED?
        Default: Handle Incident

    PASSED?:
        Type: Choice
        Choices:
            -
                Variable: $.finding.Compliance.Status
                StringEquals: PASSED
                Next: Do Nothing
        Default: New Account?

    New Account?:
        Type: Choice
        Choices:
            -
                And:
                    -
                        Variable: $.account.AccountNew
                        IsPresent: true
                    -
                        Variable: $.account.AccountNew
                        StringEquals: 'Yes'
                Next: Do Nothing
        Default: Already Has or Has Had Ticket?

    Already Has or Has Had Ticket?:
        Type: Choice
        Choices:
            -
                Variable: $.finding.UserDefinedFields.TicketId
                IsPresent: true
                Next: Suppress Finding
        Default: New clone of already ticketed issue?

    New clone of already ticketed issue?:
        Type: Choice
        Choices:
            -
                Variable: $.db.tickets.Item
                IsPresent: true
                Next: Suppress Finding
        Default: Get Enabled Controls Local Suppressions Table Entry

    Get Enabled Controls Local Suppressions Table Entry:
        Type: Task
        Resource: 'arn:aws:states:::dynamodb:getItem'
        Parameters:
            TableName: '${LocalControlSuppressionsName}'
            Key:
                id:
                    S.$: $.finding.Compliance.SecurityControlId
        ResultPath: $.db.local-control-suppressions
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.AmazonDynamoDBException
                    - DynamoDB.SdkClientException
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: Check whether to suppress control locally

    Check whether to suppress control locally:
        Type: Task
        Resource: '${SuppressLocallyFunctionArn}'
        Parameters:
            account.$: $.account
            table: local-control-suppressions
            db.$: $.db
            region.$: $.finding.Resources[0].Region
        ResultPath: $.suppress_locally
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Check local control suppression result

    Check local control suppression result:
        Type: Choice
        Choices:
            -
                Variable: $.suppress_locally
                BooleanEquals: true
                Next: Suppress Finding
        Default: Compute Penalty Score

    Compute Penalty Score:
        Type: Task
        Resource: '${ComputePenaltyScoreFunctionArn}'
        ResultPath: $.penalty_score
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Get Remediatable SecHub Controls Table Entry

    Get Remediatable SecHub Controls Table Entry:
        Type: Task
        Resource: 'arn:aws:states:::dynamodb:getItem'
        Parameters:
            TableName: '${RemediatableSecHubControlsName}'
            Key:
                id:
                    S.$: $.finding.Compliance.SecurityControlId
        ResultPath: $.db.remediatable-sec-hub-controls
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.AmazonDynamoDBException
                    - DynamoDB.SdkClientException
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: Is the autoremediation enabled?

    Is the autoremediation enabled?:
        Type: Choice
        Choices:
            -
                Variable: $.db.remediatable-sec-hub-controls.Item
                IsPresent: false
                Next: Ticket the Team
        Default: Get Enabled Controls Local AutoRem Suppressions Table Entry

    Get Enabled Controls Local AutoRem Suppressions Table Entry:
        Type: Task
        Resource: 'arn:aws:states:::dynamodb:getItem'
        Parameters:
            TableName: '${LocalControlAutoRemSuppressionsName}'
            Key:
                id:
                    S.$: $.finding.Compliance.SecurityControlId
        ResultPath: $.db.local-control-autoremediation-suppressions
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.AmazonDynamoDBException
                    - DynamoDB.SdkClientException
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: Check whether to suppress control auto-remediation locally

    Check whether to suppress control auto-remediation locally:
        Type: Task
        Resource: '${SuppressLocallyFunctionArn}'
        Parameters:
            account.$: $.account
            table: local-control-autoremediation-suppressions
            db.$: $.db
            region.$: $.finding.Resources[0].Region
        ResultPath: $.suppress_locally
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Check local control auto-remediation suppression result

    Check local control auto-remediation suppression result:
        Type: Choice
        Choices:
            -
                Variable: $.suppress_locally
                BooleanEquals: false
                Next: Attempt AutoRemediation
        Default: Ticket the Team

    Attempt AutoRemediation:
        Type: Task
        Resource: 'arn:aws:states:::states:startExecution.sync:2'
        Parameters:
            Input:
                account.$: $.account
                finding.$: $.finding
                tags.$: $.tags
                actions.$: $.actions
                messages.$: $.messages
                db.$: $.db
                penalty_score.$: $.penalty_score
                AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
            StateMachineArn: '${AttemptAutoRemediationSMArn}'
        Retry:
            -
                ErrorEquals:
                    - StepFunctions.ExecutionLimitExceeded
        OutputPath: $.Output
        Next: Reconsider later?

    Reconsider later?:
        Type: Choice
        Choices:
            -
                Variable: $.actions.reconsider_later
                BooleanEquals: true
                Next: Keep as NEW
        Default: Suppress finding?

    Keep as NEW:
        Type: Succeed

    Suppress finding?:
        Type: Choice
        Choices:
            -
                Variable: $.actions.suppress_finding
                BooleanEquals: true
                Next: Suppress Finding
        Default: Autoremediation successful?

    Autoremediation successful?:
        Type: Choice
        Choices:
            -
                Variable: $.actions.autoremediation_not_done
                BooleanEquals: true
                Next: Ticket the Team
        Default: Format Remediation Message

    Ticket the Team:
        Type: Pass
        Next: Defer Team fixes?

    Defer Team fixes?:
        Type: Choice
        Choices:
        - Variable: "$.DeferTeamFixes"
          StringEquals: "Yes"
          Next: Keep as NEW
        Default: Format Ticketing Message

    Format Ticketing Message:
        Type: Task
        Resource: '${FormatTicketingMessageFunctionArn}'
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Open TEAMFIX Ticket

    Open TEAMFIX Ticket:
        Type: Task
        Resource: '${OpenTicketFunctionArn}'
        ResultPath: $.ticket
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Remember Ticket Opened

    Remember Ticket Opened:
        Type: Task
        Resource: '${RememberTicketOpenedFunctionArn}'
        Parameters:
            Id.$: $.finding.Id
            Account.$: $.account.Name
            SecurityControlId.$: $.finding.Compliance.SecurityControlId
            Title.$: $.finding.Title
            Environment.$: $.account.Environment
            Team.$: $.account.Team
            ProjectId.$: $.account.ProjectId
            ProjectIdApp.$: $.account.ProjectIdApp
            SeverityLabel.$: $.finding.Severity.Label
            PenaltyScore.$: $.penalty_score
            TicketId.$: $.ticket.TicketId
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: AddAiInstructionsForOpenedTickets

    AddAiInstructionsForOpenedTickets:
        Type: Task
        Resource: arn:aws:states:::dynamodb:getItem
        Parameters:
            TableName: "${OpenAIPromptsTableName}"
            Key:
                id: "ticket_opened"
            ProjectionExpression: "instructions"
        ResultSelector:
            instructions.$: "$.Item.instructions.S"
        ResultPath: "$.nested_instructions"
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: AddAiDataForOpenedTickets

    AddAiDataForOpenedTickets:
        Type: Task
        Resource: '${QueryChatGPTFunctionArn}'
        TimeoutSeconds: 120
        Retry:
            -
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                IntervalSeconds: 5
                MaxAttempts: 5
                BackoffRate: 2
        Catch:
            -   
                ErrorEquals:
                    - States.Timeout
                Next: Send Ticketing Email
            -   
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                Next: Send Ticketing Email
            -   
                ErrorEquals:
                -   States.ALL
                ResultPath: "$.openai-error-info"
                Next: OpenAiFailState
        Next: Send Ticketing Email

    Send Ticketing Email:
        Type: Task
        Resource: '${SendEmailFunctionArn}'
        Parameters:
            Recipient.$: $.account.TeamEmail
            Subject.$: $.messages.email.subject
            Body.$: $.messages.email.body
            Html.$: $.messages.email.html
            AiPlaintext.$: $.messages.ai.plaintext
            AiHtml.$: $.messages.ai.html
            TicketId.$: $.ticket.TicketId
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Set to NOTIFIED + Ticket data

    Set to NOTIFIED + Ticket data:
        Type: Task
        Resource: '${UpdateTicketedFindingFunctionArn}'
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                    - TooManyRequestsException
                IntervalSeconds: 3
                MaxAttempts: 25
                BackoffRate: 3
        End: True

    Format Remediation Message:
        Type: Task
        Resource: '${FormatRemediationMessageFunctionArn}'
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Open AUTOFIXED Ticket

    Open AUTOFIXED Ticket:
        Type: Task
        Resource: '${OpenTicketFunctionArn}'
        ResultPath: $.ticket
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Remember AutoRemediation Done

    Remember AutoRemediation Done:
        Type: Task
        Resource: '${RememberAutoRemediationDoneFunctionArn}'
        Parameters:
            Id.$: $.finding.Id
            Account.$: $.account.Name
            SecurityControlId.$: $.finding.Compliance.SecurityControlId
            Title.$: $.finding.Title
            Environment.$: $.account.Environment
            Team.$: $.account.Team
            ProjectId.$: $.account.ProjectId
            ProjectIdApp.$: $.account.ProjectIdApp
            SeverityLabel.$: $.finding.Severity.Label
            PenaltyScore.$: $.penalty_score
            TicketId.$: $.ticket.TicketId
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 100
                BackoffRate: 3
        Next: AddAiInstructionsForAutoremediations

    AddAiInstructionsForAutoremediations:
        Type: Task
        Resource: arn:aws:states:::dynamodb:getItem
        Parameters:
            TableName: "${OpenAIPromptsTableName}"
            Key:
                id: "autoremediation"
            ProjectionExpression: "instructions"
        ResultSelector:
            instructions.$: "$.Item.instructions.S"
        ResultPath: "$.nested_instructions"
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - DynamoDB.SdkClientException
                    - DynamoDB.InternalServerErrorException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: AddAiDataForAutoremediation

    AddAiDataForAutoremediation:
        Type: Task
        Resource: '${QueryChatGPTFunctionArn}'
        TimeoutSeconds: 120
        Retry:
            -
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                IntervalSeconds: 5
                MaxAttempts: 5
                BackoffRate: 2
        Catch:
            -   
                ErrorEquals:
                    - States.Timeout
                Next: Send Remediation Email
            -   
                ErrorEquals:
                    - Lambda.TooManyRequestsException
                    - Lambda.ServiceException
                Next: Send Remediation Email
            -   
                ErrorEquals:
                -   States.ALL
                ResultPath: "$.openai-error-info"
                Next: OpenAiFailState
        Next: Send Remediation Email

    Send Remediation Email:
        Type: Task
        Resource: '${SendEmailFunctionArn}'
        Parameters:
            Recipient.$: $.account.TeamEmail
            Subject.$: $.messages.email.subject
            Body.$: $.messages.email.body
            Html.$: $.messages.email.html
            AiPlaintext.$: $.messages.ai.plaintext
            AiHtml.$: $.messages.ai.html
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                IntervalSeconds: 3
                MaxAttempts: 10
                BackoffRate: 3
        Next: Set to RESOLVED

    Set to RESOLVED:
        Type: Task
        Resource: '${UpdateRemediatedFindingFunctionArn}'
        ResultPath: null
        Retry:
            -
                ErrorEquals:
                    - States.Timeout
                    - Lambda.ServiceException
                    - Lambda.AWSLambdaException
                    - Lambda.SdkClientException
                    - TooManyRequestsException
                IntervalSeconds: 3
                MaxAttempts: 25
                BackoffRate: 3
        End: True

    Handle Incident:
        Type: Task
        Resource: 'arn:aws:states:::states:startExecution.sync:2'
        Parameters:
            Input:
                account.$: $.account
                finding.$: $.finding
                tags.$: $.tags
                actions.$: $.actions
                messages.$: $.messages
                db.$: $.db
                DiskForensicsInvokeArn: '${DiskForensicsInvokeArn}'
                AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
            StateMachineArn: '${IncidentsSMArn}'
        Retry:
            -
                ErrorEquals:
                    - StepFunctions.ExecutionLimitExceeded
        OutputPath: $.Output
        End: true

    OpenAiFailState:
        Type: Fail
        Cause: "The call to the OpenAI API failed. See $.openai-error-info for more details."
