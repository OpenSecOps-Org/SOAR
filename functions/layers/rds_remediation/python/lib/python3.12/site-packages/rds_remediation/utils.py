"""
RDS Remediation Utilities

This module provides standardized utility functions for RDS autoremediation Lambda functions.
"""

from botocore.exceptions import ClientError


def ensure_resource_available(client, resource_type, resource_id):
    """
    Wait for an RDS resource to be available before modifying it.
    
    Args:
        client (boto3.client): The RDS boto3 client
        resource_type (str): The type of resource ('instance' or 'cluster')
        resource_id (str): The identifier of the resource
        
    Returns:
        None
    """
    print(f"Waiting for {resource_type} {resource_id} to be available...")
    if resource_type == 'instance':
        waiter = client.get_waiter('db_instance_available')
        waiter.wait(DBInstanceIdentifier=resource_id)
    elif resource_type == 'cluster':
        waiter = client.get_waiter('db_cluster_available')
        waiter.wait(DBClusterIdentifier=resource_id)
    print(f"{resource_type.capitalize()} {resource_id} is available")


def handle_not_found_error(error, resource_type, data):
    """
    Handle cases where resources are not found, updating the data with suppression flags.
    
    Args:
        error (ClientError): The boto3 client error
        resource_type (str): The type of resource ('instance', 'cluster', 'snapshot', etc.)
        data (dict): The Lambda handler data dictionary to update
        
    Returns:
        bool: True if error was handled, False otherwise
    """
    error_code = error.response['Error']['Code']
    
    # Handle different variations of not found errors
    not_found_codes = {
        'instance': ['DBInstanceNotFoundFault', 'DBInstanceNotFound'],
        'cluster': ['DBClusterNotFoundFault', 'DBClusterNotFound'], 
        'snapshot': ['DBSnapshotNotFoundFault', 'DBSnapshotNotFound'],
        'cluster_snapshot': ['DBClusterSnapshotNotFoundFault', 'DBClusterSnapshotNotFound']
    }
    
    if resource_type in not_found_codes and error_code in not_found_codes[resource_type]:
        print(f"The {resource_type} wasn't found. Suppressing.")
        data['messages']['actions_taken'] = f"The {resource_type} wasn't found. This finding has been suppressed."
        data['actions']['suppress_finding'] = True
        return True
    return False


def modify_db_resource(client, resource_type, resource_id, params, data):
    """
    Apply modifications to an RDS resource with error handling.
    
    Args:
        client (boto3.client): The RDS boto3 client
        resource_type (str): The type of resource ('instance' or 'cluster')
        resource_id (str): The identifier of the resource
        params (dict): The parameters to pass to the modify operation
        data (dict): The Lambda handler data dictionary
        
    Returns:
        bool: True if modification was successful, False otherwise
    """
    try:
        ensure_resource_available(client, resource_type, resource_id)
        
        if resource_type == 'instance':
            response = client.modify_db_instance(
                DBInstanceIdentifier=resource_id,
                ApplyImmediately=True,
                **params
            )
        elif resource_type == 'cluster':
            response = client.modify_db_cluster(
                DBClusterIdentifier=resource_id,
                ApplyImmediately=True,
                **params
            )
        print(response)
        return True
    except ClientError as error:
        if handle_not_found_error(error, resource_type, data):
            return False
        raise error


def get_parameter_group_family(client, engine, engine_version, resource_type, resource_id):
    """
    Get a valid parameter group family based on engine and version.
    
    Args:
        client (boto3.client): The RDS boto3 client (not used but kept for consistency)
        engine (str): The database engine (e.g., 'aurora-postgresql', 'mysql')
        engine_version (str): The engine version (e.g., '13.4')
        resource_type (str): The type of resource ('instance' or 'cluster')
        resource_id (str): The identifier of the resource
        
    Returns:
        str: The parameter group family name
    """
    print(f"Determining parameter group family for {engine} version {engine_version}")
    
    # Extract major version
    major_version = engine_version.split('.')[0]
    
    # Map engine and version to valid parameter group family
    if engine == 'aurora-postgresql':
        family = f"aurora-postgresql{major_version}"
    elif engine == 'aurora-mysql':
        # Aurora MySQL uses specific family formats
        if int(major_version) >= 8:
            family = "aurora-mysql8.0"
        else:
            family = "aurora-mysql5.7"
    elif engine == 'postgres':
        family = f"postgres{major_version}"
    elif engine == 'mysql':
        family = f"mysql{major_version}"
    else:
        # For other engines, use standard format
        family = f"{engine}{major_version}"
    
    print(f"Using parameter group family: {family}")
    return family


def get_engine_details(client, resource_type, resource_id):
    """
    Get engine type and version from an RDS resource.
    
    Args:
        client (boto3.client): The RDS boto3 client
        resource_type (str): The type of resource ('instance' or 'cluster')
        resource_id (str): The identifier of the resource
        
    Returns:
        tuple: (engine, engine_version)
    """
    print(f"Getting engine details for {resource_type} {resource_id}")
    
    if resource_type == 'instance':
        response = client.describe_db_instances(
            DBInstanceIdentifier=resource_id
        )
        instance = response['DBInstances'][0]
        return instance['Engine'], instance['EngineVersion']
    elif resource_type == 'cluster':
        response = client.describe_db_clusters(
            DBClusterIdentifier=resource_id
        )
        cluster = response['DBClusters'][0]
        return cluster['Engine'], cluster['EngineVersion']