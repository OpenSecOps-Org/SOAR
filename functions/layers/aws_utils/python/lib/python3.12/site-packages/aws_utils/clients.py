"""
AWS Client Utilities

This module provides functions for creating AWS clients, especially for cross-account access.
"""

import os
import boto3
import inspect

# Create a single STS client at the module level for efficiency
# This is reused by all get_client calls within the same Lambda container
# Named in uppercase following Python convention for module-level constants
STS_CLIENT = boto3.client('sts')


def get_client(client_type, account_id, region=None, role=None, session_name=None):
    """
    Create an AWS client for cross-account operations.
    
    Args:
        client_type (str): The AWS service client to create (e.g., 's3', 'ec2', 'rds')
        account_id (str): The target AWS account ID
        region (str, optional): The AWS region. If None, uses the default region from configuration
        role (str, optional): The IAM role to assume (defaults to CROSS_ACCOUNT_ROLE env var)
        session_name (str, optional): Custom session name (defaults to calling function file name)
    
    Returns:
        boto3.client: A boto3 client configured for the specified service in the target account
    """
    # Determine the role to use (default to CROSS_ACCOUNT_ROLE environment variable)
    if role is None:
        role = os.environ.get('CROSS_ACCOUNT_ROLE', 'OrganizationAccountAccessRole')
    
    # If session_name is not provided, determine it from the caller's context
    if session_name is None:
        # Get the caller's filename to use as session name prefix
        frame = inspect.stack()[1]
        module = inspect.getmodule(frame[0])
        if module and hasattr(module, '__file__'):
            filename = os.path.basename(module.__file__).replace('.py', '')
            session_name = f"{filename}_{account_id}"
        else:
            # Fallback if we can't determine the caller's filename
            session_name = f"aws_utils_{account_id}"
    
    # Assume role in target account using the module-level STS client
    response = STS_CLIENT.assume_role(
        RoleArn=f"arn:aws:iam::{account_id}:role/{role}",
        RoleSessionName=session_name
    )
    
    # Extract temporary credentials
    credentials = response['Credentials']
    
    # Create and return client for the specified service
    return boto3.client(
        client_type,
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken'],
        region_name=region
    )